# setting version docker-compose, new version is 3.9
version: '3.9'

# initialize all service will be wrapping in docker
services:

  # database for production
  db-product:
    image: postgres:alpine
    container_name: db-product
    hostname: db-product
    environment:
      - POSTGRES_USER=${DB_PRODUCT_USER}
      - POSTGRES_PASS=${DB_PRODUCT_PASS}
      - POSTGRES_DB=${DB_PRODUCT_NAME}
    ports:
      - "127.0.0.1:${DB_PRODUCT_PORT}:5432"
    restart: unless-stopped
    networks:
      - tokoku

  # database for user
  db-user:
    image: postgres:alpine
    container_name: db-user
    hostname: db-user
    environment:
      - POSTGRES_USER=${DB_USER_USER}
      - POSTGRES_PASS=${DB_USER_PASS}
      - POSTGRES_DB=${DB_USER_NAME}
    ports:
      - "127.0.0.1:${DB_USER_PORT}:5432"
    restart: unless-stopped
    networks:
      - tokoku
  
  # database for order
  db-order:
    image: postgres:alpine
    container_name: db-order
    hostname: db-order
    environment:
      - POSTGRES_USER=${DB_ORDER_USER}
      - POSTGRES_PASS=${DB_ORDER_PASS}
      - POSTGRES_DB=${DB_ORDER_NAME}
    ports:
      - "127.0.0.1:${DB_ORDER_PORT}:5432"
    restart: unless-stopped
    networks:
      - tokoku

  # application product
  app-product:
    build:
      context: ./product/
      dockerfile: Dockerfile
      args:
        - EXPOSE_PORT=${APP_PRODUCT_PORT}
    env_file:
      - ./product/.env
    volumes:
      - ./data/log/product.log:/data/log/product.log
    restart: unless-stopped
    ports:
      - ${APP_PRODUCT_PORT}:3000
    networks:
      - tokoku
    depends_on:
      - db-product
  
  # prometheus for observability
  prometheus:
    image: prom/prometheus:v2.40.4
    container_name: prome-tokoku
    ports:
      - ${PROMETHEUS_PORT}:9090
    volumes:
      - ./provisioning/observability/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - tokoku
  
  # grafana for visualize
  grafana:
    image: grafana/grafana:9.3.0
    container_name: grafana-tokoku
    ports:
      - ${GRAFANA_PORT}:3000
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    volumes:
      - ./provisioning/observability/datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml
      - ./data/grafana:/var/lib/grafana
    networks:
      - tokoku
  
  # loki for server logger
  loki:
    image: grafana/loki:latest
    ports:
      - 3100:3100
    volumes:
      - ./provisioning/observability/loki.yml:/etc/loki/local-config.yml
    command: -config.file=/etc/loki/local-config.yml
    networks:
      - tokoku
  
  # client for send logging
  promtail:
    image: grafana/promtail:latest
    container_name: promtail-tokoku
    volumes:
      - ./provisioning/observability/promtail.yml:/etc/promtail/docker-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/docker-config.yaml
    depends_on:
      - loki
    networks:
      - tokoku

  # order application
  app-order:
    build:
      context: ./order/
      dockerfile: Dockerfile
      args:
        - HTTP_PORT=${HTTP_ORDER_PORT}
        - GRPC_PORT=${GRPC_ORDER_PORT}
    env_file:
      - ./order/.env
    restart: unless-stopped
    ports:
      - ${HTTP_ORDER_PORT}:3000
      - ${GRPC_ORDER_PORT}:9000
    networks:
      - tokoku
    depends_on:
      - db-order

  # user application
  app-user:
    build:
      context: ./user/
      dockerfile: Dockerfile
      args:
        - EXPOSE_PORT=${APP_USER_PORT}
    env_file:
      - ./user/.env
    volumes:
      - ./data/log/product.log:/data/log/product.log
    restart: unless-stopped
    ports:
      - ${APP_USER_PORT}:3000
    networks:
      - tokoku
    depends_on:
      - db-user

  # webhook application
  app-webhook:
    build: 
      context: ./webhook/
      dockerfile: Dockerfile
      args:
        - HTTP_PORT=${APP_WEBHOOK_PORT}
    env_file:
      - ./webhook/.env
    restart: unless-stopped
    ports:
      - ${APP_WEBHOOK_PORT}:3000
    networks:
      - tokoku
  
  # message broker for pub-sub
  rabbitmq:
    image: rabbitmq:3.13.0-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - 15672:15672
      - 5672:5672
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASS}
    networks:
      - tokoku
  
  # nginx for api gateway
  nginx:
    image: nginx
    container_name: nginx-gateway
    hostname: gateway
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped
    volumes:
      - ./provisioning/gateway/nginx.conf:/etc/nginx/nginx.conf
      - ./data/log/nginx.log:/var/log/nginx-error.log
    networks:
      - tokoku
      

# networks setap for all service in this docker compose
networks:
  tokoku:
    driver: bridge