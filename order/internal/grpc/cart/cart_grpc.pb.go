// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.2
// source: proto/cart.proto

package cart

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CartServiceClient is the client API for CartService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CartServiceClient interface {
	// for create cart
	AddToCart(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// for update cart
	Update(ctx context.Context, in *RequestUpdate, opts ...grpc.CallOption) (*Response, error)
	// for endpoint listcart
	ListCart(ctx context.Context, in *ID, opts ...grpc.CallOption) (CartService_ListCartClient, error)
	// for endpoint delete cart
	DeleteCart(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error)
	// for endpoint process from cart
	Proccesses(ctx context.Context, in *RequestProcess, opts ...grpc.CallOption) (*Created, error)
}

type cartServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCartServiceClient(cc grpc.ClientConnInterface) CartServiceClient {
	return &cartServiceClient{cc}
}

func (c *cartServiceClient) AddToCart(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cart.CartService/AddToCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) Update(ctx context.Context, in *RequestUpdate, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cart.CartService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) ListCart(ctx context.Context, in *ID, opts ...grpc.CallOption) (CartService_ListCartClient, error) {
	stream, err := c.cc.NewStream(ctx, &CartService_ServiceDesc.Streams[0], "/cart.CartService/ListCart", opts...)
	if err != nil {
		return nil, err
	}
	x := &cartServiceListCartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CartService_ListCartClient interface {
	Recv() (*Data, error)
	grpc.ClientStream
}

type cartServiceListCartClient struct {
	grpc.ClientStream
}

func (x *cartServiceListCartClient) Recv() (*Data, error) {
	m := new(Data)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cartServiceClient) DeleteCart(ctx context.Context, in *ID, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/cart.CartService/DeleteCart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cartServiceClient) Proccesses(ctx context.Context, in *RequestProcess, opts ...grpc.CallOption) (*Created, error) {
	out := new(Created)
	err := c.cc.Invoke(ctx, "/cart.CartService/Proccesses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CartServiceServer is the server API for CartService service.
// All implementations must embed UnimplementedCartServiceServer
// for forward compatibility
type CartServiceServer interface {
	// for create cart
	AddToCart(context.Context, *Request) (*Response, error)
	// for update cart
	Update(context.Context, *RequestUpdate) (*Response, error)
	// for endpoint listcart
	ListCart(*ID, CartService_ListCartServer) error
	// for endpoint delete cart
	DeleteCart(context.Context, *ID) (*Response, error)
	// for endpoint process from cart
	Proccesses(context.Context, *RequestProcess) (*Created, error)
	mustEmbedUnimplementedCartServiceServer()
}

// UnimplementedCartServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCartServiceServer struct {
}

func (UnimplementedCartServiceServer) AddToCart(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToCart not implemented")
}
func (UnimplementedCartServiceServer) Update(context.Context, *RequestUpdate) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCartServiceServer) ListCart(*ID, CartService_ListCartServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCart not implemented")
}
func (UnimplementedCartServiceServer) DeleteCart(context.Context, *ID) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCart not implemented")
}
func (UnimplementedCartServiceServer) Proccesses(context.Context, *RequestProcess) (*Created, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proccesses not implemented")
}
func (UnimplementedCartServiceServer) mustEmbedUnimplementedCartServiceServer() {}

// UnsafeCartServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CartServiceServer will
// result in compilation errors.
type UnsafeCartServiceServer interface {
	mustEmbedUnimplementedCartServiceServer()
}

func RegisterCartServiceServer(s grpc.ServiceRegistrar, srv CartServiceServer) {
	s.RegisterService(&CartService_ServiceDesc, srv)
}

func _CartService_AddToCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).AddToCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/AddToCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).AddToCart(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).Update(ctx, req.(*RequestUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_ListCart_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CartServiceServer).ListCart(m, &cartServiceListCartServer{stream})
}

type CartService_ListCartServer interface {
	Send(*Data) error
	grpc.ServerStream
}

type cartServiceListCartServer struct {
	grpc.ServerStream
}

func (x *cartServiceListCartServer) Send(m *Data) error {
	return x.ServerStream.SendMsg(m)
}

func _CartService_DeleteCart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).DeleteCart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/DeleteCart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).DeleteCart(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _CartService_Proccesses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestProcess)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CartServiceServer).Proccesses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cart.CartService/Proccesses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CartServiceServer).Proccesses(ctx, req.(*RequestProcess))
	}
	return interceptor(ctx, in, info, handler)
}

// CartService_ServiceDesc is the grpc.ServiceDesc for CartService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CartService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cart.CartService",
	HandlerType: (*CartServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddToCart",
			Handler:    _CartService_AddToCart_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _CartService_Update_Handler,
		},
		{
			MethodName: "DeleteCart",
			Handler:    _CartService_DeleteCart_Handler,
		},
		{
			MethodName: "Proccesses",
			Handler:    _CartService_Proccesses_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCart",
			Handler:       _CartService_ListCart_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/cart.proto",
}
