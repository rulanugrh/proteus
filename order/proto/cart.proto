syntax = "proto3";
package cart;

// Import annotations proto for trascoding into HTTP
import "proto/google/annotations.proto";
// Empty protobuf to use for method GET All data
import "google/protobuf/empty.proto";

// Path to save record generate
option go_package = "internal/grpc/cart";

// Endpoint for Cart API
//
// This service for manage resource cart API
service CartService {
    // for create cart
    rpc AddToCart(Request) returns (Response) {
        option (google.api.http) = {
            post: "/api/cart/create"
            body: "req"
        };
    };

    // for update cart
    rpc Update(RequestUpdate) returns (Response) {
        option (google.api.http) = {
            put: "/api/cart/update/{id}"
            body: "req"
        };
    };

    // for endpoint listcart
    rpc ListCart(google.protobuf.Empty) returns (stream CartList) {
        option (google.api.http) = {
            get: "/api/cart/listcart"
        };
    };
    
    // for endpoint delete cart
    rpc DeleteCart(ID) returns (Response) {
        option (google.api.http) = { delete: "/api/cart/delete/{id}"};
    };

    // for endpoint process from cart
    rpc Proccesses(RequestProcess) returns (Created) {
        option (google.api.http) = { 
            post: "/api/cart/process/{id}"
            body: "req"
        };
    };
}

// schema for adding to cart
message Cart {
    optional uint64 id = 1;
    uint64 user_id = 2;
    uint64 product_id = 3;
    int32 quantity = 4;
}

// schema for adding to listcart
message CartList {
    string product_name = 1;
    string product_desc = 2;
    uint64 product_price = 3;
    int32 quantity = 4;
}

// schema for process create order
message OrderRequest {
    string method_payment = 1;
    string address = 2;
    string request_currency = 3;
    string channel_code = 4;
    string mobile_phone = 5;
}

// schema for request create
message Request {
    Cart req = 1;
}

// schema for update cart
message RequestUpdate {
    uint64 id = 1;
    Cart req = 2;
}

// schema for response cart
message Response {
    uint64 code = 1;
    string message = 2;
}

// schema for proccess 
message RequestProcess {
    uint64 id = 1;
    OrderRequest req = 2;
}

// schema for response created order 
message Created {
    uint64 code = 1;
    string message = 2;
    Data data = 3;
}

// schema for repeated data cart
message Data {
    string uuid = 1;
    string product_name = 2;
    int64 price = 3;
    int64 quantity = 4;
    int64 total = 5;
}

// schema for request by UUID
message ID {
    string id = 1;
}