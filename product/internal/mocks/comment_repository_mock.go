// Code generated by mockery v2.40.2. DO NOT EDIT.

package repomocks

import (
	domain "github.com/rulanugrh/tokoku/product/internal/entity/domain"
	mock "github.com/stretchr/testify/mock"
)

// CommentInterface is an autogenerated mock type for the CommentInterface type
type CommentInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *CommentInterface) Create(req domain.Comment) (*domain.Comment, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Comment) (*domain.Comment, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Comment) *domain.Comment); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Comment) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByProductID provides a mock function with given fields: id
func (_m *CommentInterface) FindByProductID(id uint) (*[]domain.Comment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByProductID")
	}

	var r0 *[]domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*[]domain.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *[]domain.Comment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: id
func (_m *CommentInterface) FindByUserID(id uint) (*[]domain.Comment, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindByUserID")
	}

	var r0 *[]domain.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*[]domain.Comment, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *[]domain.Comment); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCommentInterface creates a new instance of CommentInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentInterface {
	mock := &CommentInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
