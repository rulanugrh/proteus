// Code generated by mockery v2.40.2. DO NOT EDIT.

package repomocks

import (
	domain "github.com/rulanugrh/tokoku/product/internal/entity/domain"
	mock "github.com/stretchr/testify/mock"
)

// ProductInterface is an autogenerated mock type for the ProductInterface type
type ProductInterface struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *ProductInterface) Create(req domain.Product) (*domain.Product, error) {
	ret := _m.Called(req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(domain.Product) (*domain.Product, error)); ok {
		return rf(req)
	}
	if rf, ok := ret.Get(0).(func(domain.Product) *domain.Product); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(domain.Product) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields:
func (_m *ProductInterface) FindAll() (*[]domain.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 *[]domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() (*[]domain.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *[]domain.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindID provides a mock function with given fields: id
func (_m *ProductInterface) FindID(id uint) (*domain.Product, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindID")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*domain.Product, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *domain.Product); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, req
func (_m *ProductInterface) Update(id uint, req domain.Product) (*domain.Product, error) {
	ret := _m.Called(id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, domain.Product) (*domain.Product, error)); ok {
		return rf(id, req)
	}
	if rf, ok := ret.Get(0).(func(uint, domain.Product) *domain.Product); ok {
		r0 = rf(id, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(uint, domain.Product) error); ok {
		r1 = rf(id, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewProductInterface creates a new instance of ProductInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductInterface {
	mock := &ProductInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
